Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)

SELECT * FROM events
WHERE price IS NULL;



Selezionare tutte le location in ordine alfabetico (82)

SELECT * FROM locations
ORDER BY name ASC;



Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)

SELECT * FROM events
WHERE price < 20 AND duration < '03:00:00';



Selezionare tutti gli eventi di dicembre 2023 (25)

SELECT * FROM events
WHERE start LIKE '2023-12%';



Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)

SELECT * FROM events
WHERE duration > '02:00:00';



Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)

SELECT 
	name AS name,
    DATE(start) AS date,
    TIME(start) AS starting_time,
    ADDTIME(TIME(start), duration) AS ending_time,
    duration
FROM events;




Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)

SELECT *
FROM events
WHERE user_id = 1202;



Selezionare il numero totale di eventi per ogni fascia di prezzo (81)

SELECT
    price,
    COUNT(*) AS total_events
FROM events
GROUP BY price
ORDER BY price;



Selezionare tutti gli utenti admin ed editor (9)

SELECT * FROM users
WHERE role_id IN (1, 2);




Selezionare tutti i concerti (eventi con il tag “concerti”) (72)

SELECT * FROM event_tag
WHERE tag_id = 1;



Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)

SELECT 
    t.name AS tag_name,
    AVG(e.price) AS average_price
FROM 
    tags t
JOIN 
    event_tag et ON t.id = et.tag_id
JOIN 
    events e ON et.event_id = e.id
GROUP BY 
    t.name;



Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)

SELECT 
    l.id AS location_id,
    l.name AS location_name,
    COUNT(e.id) AS event_count
FROM 
    locations l
LEFT JOIN 
    events e ON l.id = e.location_id
GROUP BY 
    l.id, l.name;



Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)

SELECT 
    u.id AS user_id,
    u.first_name AS user_name
FROM 
    users u
JOIN 
    bookings b ON u.id = b.user_id
WHERE 
    b.event_id = 34;



Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)

SELECT 
    u.id AS user_id,
    u.first_name AS user_first_name,
    u.last_name AS user_last_name
FROM 
    users u
JOIN 
    bookings b ON u.id = b.user_id
WHERE 
    b.event_id = 2;



Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)

SELECT 
    e.id AS event_id,
    e.name AS event_name,
    e.total_tickets,
    COUNT(b.id) AS total_bookings
FROM 
    events e
LEFT JOIN 
    bookings b ON e.id = b.event_id
GROUP BY 
    e.id, e.name, e.total_tickets
HAVING 
    COUNT(b.id) = e.total_tickets;



Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)

SELECT 
    l.id AS location_id,
    l.name AS location_name,
    COUNT(e.id) AS event_count
FROM 
    locations l
LEFT JOIN 
    events e ON l.id = e.location_id
GROUP BY 
    l.id, l.name
ORDER BY 
    event_count DESC;



Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)

SELECT 
    u.id AS user_id,
    u.first_name,
    u.last_name,
    COUNT(b.event_id) AS booking_count
FROM 
    users u
JOIN 
    bookings b ON u.id = b.user_id
GROUP BY 
    u.id, u.first_name, u.last_name
HAVING 
    COUNT(b.event_id) > 70;



Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)

SELECT 
    e.name AS event_name,
    l.name AS location_name,
    COUNT(b.id) AS booking_count,
    e.total_tickets - COUNT(b.id) AS tickets_remaining
FROM 
    events e
JOIN 
    locations l ON e.location_id = l.id
LEFT JOIN 
    bookings b ON e.id = b.event_id
GROUP BY 
    e.id, e.name, l.name, e.total_tickets;